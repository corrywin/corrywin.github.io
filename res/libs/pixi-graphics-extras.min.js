this.PIXI = this.PIXI || {},
    function(t) {
        "use strict";
        Object.defineProperties(t.Graphics.prototype, {
            drawTorus: {
                value: function(t, a, r, i, o, e) {
                    return void 0 === o && (o = 0), void 0 === e && (e = 2 * Math.PI), Math.abs(e - o) >= 2 * Math.PI ? this.drawCircle(t, a, i).beginHole().drawCircle(t, a, r).endHole() : (this.finishPoly(), this.arc(t, a, r, e, o, !0).arc(t, a, i, o, e, !1).finishPoly(), this)
                }
            },
            drawChamferRect: {
                value: function(t, a, r, i, o) {
                    if (0 === o) return this.drawRect(t, a, r, i);
                    var e = Math.min(r, i) / 2,
                        h = Math.min(e, Math.max(-e, o)),
                        n = t + r,
                        s = a + i,
                        l = h < 0 ? -h : 0,
                        c = Math.abs(h);
                    return this.moveTo(t, a + c).arcTo(t + l, a + l, t + c, a, c).lineTo(n - c, a).arcTo(n - l, a + l, n, a + c, c).lineTo(n, s - c).arcTo(n - l, s - l, t + r - c, s, c).lineTo(t + c, s).arcTo(t + l, s - l, t, s - c, c).closePath()
                }
            },
            drawFilletRect: {
                value: function(t, a, r, i, o) {
                    if (o <= 0) return this.drawRect(t, a, r, i);
                    for (var e = Math.min(o, Math.min(r, i) / 2), h = t + r, n = a + i, s = [t + e, a, h - e, a, h, a + e, h, n - e, h - e, n, t + e, n, t, n - e, t, a + e], l = s.length - 1; l >= 2; l -= 2) s[l] === s[l - 2] && s[l - 1] === s[l - 3] && s.splice(l - 1, 2);
                    return this.drawPolygon(s)
                }
            },
            drawRegularPolygon: {
                value: function(t, a, r, i, o) {
                    void 0 === o && (o = 0), i = Math.max(0 | i, 3);
                    for (var e = -1 * Math.PI / 2 + o, h = 2 * Math.PI / i, n = [], s = 0; s < i; s++) {
                        var l = s * h + e;
                        n.push(t + r * Math.cos(l), a + r * Math.sin(l))
                    }
                    return this.drawPolygon(n)
                }
            },
            drawDashedPolygon: {
                value: function(t, a, r, i, o, e) {
                    var h, n, s, l = 0,
                        c = 0,
                        u = [];
                    for (h = 0; h < t.length; h++) {
                        var y = {
                                x: t[h].x,
                                y: t[h].y
                            },
                            v = Math.cos(i),
                            d = Math.sin(i),
                            f = y.x,
                            M = y.y;
                        y.x = f * v - M * d, y.y = f * d + M * v, u.push(y)
                    }
                    for (h = 0; h < u.length; h++) {
                        n = u[h], f = (s = h == u.length - 1 ? u[0] : u[h + 1]).x - n.x, M = s.y - n.y;
                        var P = Math.sqrt(f * f + M * M),
                            x = {
                                x: f / P,
                                y: M / P
                            },
                            T = 0;
                        for (this.moveTo(a + n.x + c * x.x, r + n.y + c * x.y); T <= P;) T += c, (T += l > 0 ? l : o) > P ? (l = T - P, T = P) : l = 0, this.lineTo(a + n.x + T * x.x, r + n.y + T * x.y), (T += e) > P && 0 == l ? c = T - P : (c = 0, this.moveTo(a + n.x + T * x.x, r + n.y + T * x.y))
                    }
                    return this.closePath()
                }
            }
        })
    }(PIXI);